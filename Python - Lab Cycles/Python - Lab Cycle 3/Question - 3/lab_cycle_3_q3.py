# -*- coding: utf-8 -*-
"""Lab_Cycle_3_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FOaMftl9UM_cyHoQmnErWFg4qhLR5qVh

3.Create an account in Kaggle.com Download iris dataset from the link https://www.kaggle.com/datasets/saurabh00007/iriscsv Load it using pandas library Prepare the following charts : 
* Bar chart showing the frequency of species column 
* Apply PCA to get two principle components and show the data distribution as a scatter plot. (use functon from sklearn) 
* Show the distribution of each attribute as histogram. 
* Note: for visualization, you can either use matplotlib or seaborn
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
# %matplotlib inline

#reading the csv file into df.
df = pd.read_csv ('Iris.csv')

#ploting the bar chart according to the frequency of species.
df.Species.value_counts().plot(figsize=(8,6),kind='bar',color=['r','g','b'],xlabel='Species',ylabel='Frequency of Species')
plt.title("Frequency Bar Graph")
plt.show()

print("\nPCA Graph")
#plotting the principal analysis graph for two components
X = df.iloc[:, 1:5].values
X_std = StandardScaler().fit_transform(X)
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(X_std)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
finalDf = pd.concat([principalDf, df['Species']], axis = 1)

fig = plt.figure(figsize = (10,8))
ax = fig.add_subplot(1,1,1)
ax.set_xlabel('First Principle Component')
ax.set_ylabel('Second Principal Component')
ax.set_title('PCA Graph')
targets = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
colors = ['r', 'g', 'b']
for target, color in zip(targets,colors):
    indicesToKeep = finalDf['Species'] == target
    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
               , finalDf.loc[indicesToKeep, 'principal component 2']
               , c = color
               , s = 50)
ax.legend(targets)
plt.show()


print("\nDistribution Histogram\n")

#histogram for sepal length.
plt.figure(figsize = (7, 5))
x = df.SepalLengthCm
plt.hist(x, color = "r")
plt.title("Sepal Length Histogram")
plt.xlabel("Sepal Length cm")
plt.ylabel("Distribution Count")
plt.show()

print()
#histogram for sepal width.
plt.figure(figsize = (7, 5))
x = df.SepalWidthCm
plt.hist(x, color = "g")
plt.title("Sepal Width Histogram")
plt.xlabel("Sepal Width cm")
plt.ylabel("Distribution Count")
plt.show()

print()
#histogram for petal length.
plt.figure(figsize = (7, 5))
x = df.PetalLengthCm
plt.hist(x, color = "b")
plt.title("Petal Length Histogram")
plt.xlabel("Petal Length cm")
plt.ylabel("Distribution Count")
plt.show()

print()
#histogram for petal widht.
plt.figure(figsize = (7, 5))
x = df.PetalWidthCm
plt.hist(x, color = "orange")
plt.title("Petal Width Histogram")
plt.xlabel("Petal Width cm")
plt.ylabel("Distribution Count")
plt.show()